
import { supabase } from '@/integrations/supabase/client';
import { ContextualResponse } from '@/components/chat/types';

export const detectCampaignCreationIntent = (userMessage: string): boolean => {
  const campaignKeywords = [
    'ุฃูุดุฆ ุญููุฉ',
    'ุฅูุดุงุก ุญููุฉ', 
    'ุญููุฉ ุชุณููููุฉ',
    'ุญููุฉ ุฅุนูุงููุฉ',
    'ุญููุฉ ุฌุฏูุฏุฉ',
    'ุฃุฑูุฏ ุญููุฉ',
    'ุฃุจุฏุฃ ุญููุฉ'
  ];
  
  return campaignKeywords.some(keyword => 
    userMessage.toLowerCase().includes(keyword.toLowerCase())
  );
};

export const generateCampaignCreationResponse = (step: number, campaignData?: any): ContextualResponse => {
  const steps = [
    {
      question: "ููุชุงุฒ! ุฏุนูู ุฃุณุงุนุฏู ูู ุฅูุดุงุก ุญููุฉ ุชุณููููุฉ ูุนุงูุฉ. ๐ฏ\n\nูุง ูู ุงููุฏู ุงูุฑุฆูุณู ูู ูุฐู ุงูุญููุฉุ",
      options: ['ุฒูุงุฏุฉ ุงููุนู ุจุงูุนูุงูุฉ ุงูุชุฌุงุฑูุฉ', 'ุฒูุงุฏุฉ ุงููุจูุนุงุช', 'ุฌุฐุจ ุนููุงุก ุฌุฏุฏ', 'ุชูุงุนู ุฃูุซุฑ ุนูู ูุณุงุฆู ุงูุชูุงุตู'],
      field: 'objective'
    },
    {
      question: "ุฑุงุฆุน! ุงูุขูุ ูุง ูู ููุฒุงููุชู ุงููุฎุตุตุฉ ููุฐู ุงูุญููุฉุ ๐ฐ",
      options: ['ุฃูู ูู 1000 ุฑูุงู', '1000 - 5000 ุฑูุงู', '5000 - 15000 ุฑูุงู', 'ุฃูุซุฑ ูู 15000 ุฑูุงู'],
      field: 'budget'
    },
    {
      question: "ููุชุงุฒ! ุฃู ููุตุงุช ุชุฑูุฏ ุงูุชุฑููุฒ ุนูููุง ูู ูุฐู ุงูุญููุฉุ ๐ฑ",
      options: ['ููุณุจูู ูุฅูุณุชุบุฑุงู', 'ุฌูุฌู ูุจุญุซ', 'ููููุฏ ุฅู', 'ุชูู ุชูู', 'ุฌููุน ุงูููุตุงุช'],
      field: 'platforms'
    },
    {
      question: "ูุซุงูู! ูู ูุฏุฉ ุงูุญููุฉ ุงูุชู ุชูุถููุงุ โฐ",
      options: ['ุฃุณุจูุน ูุงุญุฏ', 'ุฃุณุจูุนูู', 'ุดูุฑ ูุงูู', '3 ุดููุฑ'],
      field: 'duration'
    },
    {
      question: "ููุชุงุฒ! ูู ูู ุฌูููุฑู ุงููุณุชูุฏูุ ๐ฅ",
      options: ['ุงูุดุจุงุจ (18-30)', 'ุงูุจุงูุบูู (30-45)', 'ูุจุงุฑ ุงูุณู (45+)', 'ุฌููุน ุงูุฃุนูุงุฑ'],
      field: 'audience'
    }
  ];

  if (step < steps.length) {
    const currentStep = steps[step];
    return {
      text: currentStep.question,
      actionButton: {
        label: 'ุงุฎุชุฑ ูู ุงูุฎูุงุฑุงุช',
        action: () => console.log('Show options')
      },
      stepData: {
        step,
        field: currentStep.field,
        options: currentStep.options
      }
    };
  } else {
    // Generate final campaign preview
    return {
      text: `๐ ุชู ุฅูุดุงุก ุญููุชู ุงูุชุณููููุฉ ุจูุฌุงุญ!

๐ **ููุฎุต ุงูุญููุฉ:**
- **ุงููุฏู**: ${campaignData.objective || 'ุบูุฑ ูุญุฏุฏ'}
- **ุงูููุฒุงููุฉ**: ${campaignData.budget || 'ุบูุฑ ูุญุฏุฏุฉ'}
- **ุงูููุตุงุช**: ${campaignData.platforms || 'ุบูุฑ ูุญุฏุฏุฉ'}
- **ุงููุฏุฉ**: ${campaignData.duration || 'ุบูุฑ ูุญุฏุฏุฉ'}
- **ุงูุฌูููุฑ**: ${campaignData.audience || 'ุบูุฑ ูุญุฏุฏ'}

๐ **ุงูุชููุนุงุช:**
- ูุนุฏู ูุตูู ูุชููุน: 15,000 - 25,000 ุดุฎุต
- ุชูุงุนู ูุชููุน: 500 - 800 ุชูุงุนู
- ุนุงุฆุฏ ุงุณุชุซูุงุฑ ูุชููุน: 150% - 200%

ูู ุชุฑูุฏ ุญูุธ ูุฐู ุงูุญููุฉ ูุจุฏุก ุชูููุฐูุงุ`,
      actionButton: {
        label: 'ุญูุธ ูุชูููุฐ ุงูุญููุฉ',
        action: () => saveCampaign(campaignData)
      }
    };
  }
};

export const saveCampaign = async (campaignData: any) => {
  try {
    const { data: { user } } = await supabase.auth.getUser();
    if (user) {
      const { error } = await supabase
        .from('marketing_campaigns')
        .insert({
          name: `ุญููุฉ ${campaignData.objective || 'ุชุณููููุฉ'} - ${new Date().toLocaleDateString('ar-SA')}`,
          description: `ุญููุฉ ${campaignData.objective} ููุฌูููุฑ ${campaignData.audience} ููุฏุฉ ${campaignData.duration}`,
          budget: parseBudget(campaignData.budget),
          target_market: campaignData.audience,
          status: 'draft',
          user_id: user.id,
          goals: { objective: campaignData.objective },
          performance_data: { platforms: campaignData.platforms, duration: campaignData.duration }
        });

      if (!error) {
        console.log('Campaign saved successfully');
      }
    }
  } catch (error) {
    console.error('Error saving campaign:', error);
  }
};

const parseBudget = (budgetText: string): number => {
  if (budgetText?.includes('1000')) return 500;
  if (budgetText?.includes('5000')) return 3000;
  if (budgetText?.includes('15000')) return 10000;
  if (budgetText?.includes('ุฃูุซุฑ')) return 20000;
  return 1000;
};
